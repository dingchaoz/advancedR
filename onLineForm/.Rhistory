l <- c(list,x[i])
}
}
}
y <- myfunction(x)
y
l
print(l)
print (x)
length(header1)
source('~/Dingchao/Courses/R/RShinyDash/Dashboard/App.R')
install.package(dplyr)
install.packages(dplyr)
install.packages("dplyr")
source('~/Dingchao/Courses/R/RShinyDash/Dashboard/App.R')
getwd()
setwd("C:/Users/ks692/Documents/Dingchao/Courses/R/RShinyDash")
source('~/Dingchao/Courses/R/RShinyDash/Dashboard/App.R')
getwd()
source('~/Dingchao/Courses/R/RShinyDash/Dashboard/App.R')
conn
conn2 <- odbcConnect(case=nochange
DSN=Capability
UID=
Trusted_Connection=Yes
APP=RStudio
WSID=L4-S149242
DATABASE=HDPacific)
conn2 <- odbcConnect(
DSN=Capability
UID=
Trusted_Connection=Yes
APP=RStudio
WSID=L4-S149242
DATABASE=HDPacific)
source('~/Dingchao/Courses/R/RShinyDash/Dashboard/App.R')
source('~/Dingchao/Courses/R/RShinyDash/Dashboard/App.R')
SoftwareBuild <- sqlQuery(conn,paste("Select distinct calibration from",PrgMap$Database[[1]], " .dbo.tblDataInBuild"))
source('~/Dingchao/Courses/R/RShinyDash/Dashboard/App.R', echo=TRUE)
source('~/Dingchao/Courses/R/RShinyDash/Dashboard/App.R')
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
getwd()
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app.R')
install.packages("shinyjs")
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app.R')
setwd('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app.R')
shinyApp(ui = ui, server = server)
getwd()
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app.R')
setwd('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app2.R')
shinyApp(ui, server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app2.R')
shinyApp(ui, server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app2.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app.R')
getwd()
shinyApp()
shinyApp(ui, server)
server = function(input, output) {
onclick("update", text("time", date()))
onclick("toggleAdvanced", toggle(id = "advanced", anim = TRUE))
observe({
toggleClass("myapp", "big", input$big)
})
observe({
toggleState("submit", !is.null(input$name) && input$name != "")
})
observeEvent(input$submit, {
info("Thank you!")
})
observeEvent(input$reset, {
reset("myapp")
})
}
shinyApp(ui, server)
ui = fixedPage(
useShinyjs(),
inlineCSS(list(.big = "font-size: 2em",
a = "cursor: pointer")),
fixedRow(
column(6, wellPanel(
div(id = "myapp",
h2("shinyjs demo"),
checkboxInput("big", "Bigger text", FALSE),
textInput("name", "Name", ""),
a(id = "toggleAdvanced", "Show/hide advanced info"),
hidden(
div(id = "advanced",
numericInput("age", "Age", 30),
textInput("company", "Company", "")
)
),
p("Timestamp: ",
span(id = "time", date()),
a(id = "update", "Update")
),
actionButton("submit", "Submit"),
actionButton("reset", "Reset form")
),
br(), br()
)),
column(6,
getHelperText()
)
)
),
ui = fixedPage(
useShinyjs(),
inlineCSS(list(.big = "font-size: 2em",
a = "cursor: pointer")),
fixedRow(
column(6, wellPanel(
div(id = "myapp",
h2("shinyjs demo"),
checkboxInput("big", "Bigger text", FALSE),
textInput("name", "Name", ""),
a(id = "toggleAdvanced", "Show/hide advanced info"),
hidden(
div(id = "advanced",
numericInput("age", "Age", 30),
textInput("company", "Company", "")
)
),
p("Timestamp: ",
span(id = "time", date()),
a(id = "update", "Update")
),
actionButton("submit", "Submit"),
actionButton("reset", "Reset form")
),
br(), br()
)),
column(6,
getHelperText()
)
)
ui = fixedPage(
useShinyjs(),
inlineCSS(list(.big = "font-size: 2em",
a = "cursor: pointer")),
fixedRow(
column(6, wellPanel(
div(id = "myapp",
h2("shinyjs demo"),
checkboxInput("big", "Bigger text", FALSE),
textInput("name", "Name", ""),
a(id = "toggleAdvanced", "Show/hide advanced info"),
hidden(
div(id = "advanced",
numericInput("age", "Age", 30),
textInput("company", "Company", "")
)
),
p("Timestamp: ",
span(id = "time", date()),
a(id = "update", "Update")
),
actionButton("submit", "Submit"),
actionButton("reset", "Reset form")
),
br(), br()
)),
column(6,
getHelperText()
)
)
)
ui = fixedPage(
useShinyjs(),
inlineCSS(list(.big = "font-size: 2em",
a = "cursor: pointer")),
fixedRow(
column(6, wellPanel(
div(id = "myapp",
h2("shinyjs demo"),
checkboxInput("big", "Bigger text", FALSE),
textInput("name", "Name", ""),
a(id = "toggleAdvanced", "Show/hide advanced info"),
hidden(
div(id = "advanced",
numericInput("age", "Age", 30),
textInput("company", "Company", "")
)
),
p("Timestamp: ",
span(id = "time", date()),
a(id = "update", "Update")
),
actionButton("submit", "Submit"),
actionButton("reset", "Reset form")
),
br(), br()
)),
column(6,
getHelperText()
)
)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app.R')
shinyjs::runExample()
shinyjs::
shinyjs()
shinyApp(ui, server)
server = function(input, output) {
}
shinyApp(ui, server)
ui = fluidPage(
div(id = "myapp",
h2("shinyjs demo"),
textInput("name", "Name", ""),
numericInput("age", "Age", 30),
textInput("company", "Company", ""),
p("Timestamp: ", span(date())),
actionButton("submit", "Submit")
)
shinyApp(
ui = fluidPage(
div(id = "myapp",
h2("shinyjs demo"),
textInput("name", "Name", ""),
numericInput("age", "Age", 30),
textInput("company", "Company", ""),
p("Timestamp: ", span(date())),
actionButton("submit", "Submit")
)
),
server = function(input, output) {
}
)
runApp('app.R')
runApp('myapp')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app.R')
runApp('myapp')
library(shiny)
runApp("myapp")
getwd()
runApp("C:/Users/ks692/Documents/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest")
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app.R')
runApp("C:/Users/ks692/Documents/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest")
shiny::runGitHub("shiny-js-examples", "jcheng5", subdir="output")
getwd()
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app.R')
setwd('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app3.R')
install.packages('shinydashboard')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app3.R')
shinyApp(ui, server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app2.R')
shinyApp(ui, server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app2.R')
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app2.R')
shinyApp(ui, server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app2.R')
shinyApp(ui, server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app2.R')
shinyApp(ui, server)
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/app.R')
runApp("C:/Users/ks692/Documents/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest")
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/helper-text.R')
runApp("C:/Users/ks692/Documents/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest")
source('~/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/helper-text.R')
runApp("C:/Users/ks692/Documents/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest")
runApp("C:/Users/ks692/Documents/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/shiny-examples-master/054-nvd3-line-chart-output")
x <- "test test2 test3"
y <- strsplit(x," ")
y
y[1]
y[1][1]
y[[1]][1]
y[[1]][2]
z <- tapply(y,seq(1:len(y)),paste, collapse = "")
z <- tapply(y,seq(1:length(y)),paste, collapse = "")
z
z <- tapply(y,seq(1:length(y)),paste, collapse = " ")
z
z <- tapply(y,seq(1:length(y)),paste)
z
runApp("C:/Users/ks692/Documents/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest")
runApp("C:/Users/ks692/Documents/Dingchao/Courses/R/R Programming/Assignments/Shiny-dev/SelfTest/shiny-examples-master/054-nvd3-line-chart-output")
source('~/Dingchao/Courses/R/RShinyDash/Dashboard/App.R')
source('~/Dingchao/Courses/R/RShinyDash/Dashboard/App.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/RShinyDash/Dashboard/App.R')
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
getwd()
source('~/Dingchao/Courses/R/RShinyDash/Dashboard/App.R')
getwd(0)
getwd(0)
getwd()
source('~/Dingchao/Courses/R/RShinyDash/Example App/Parsing_Playtxt.R')
source('~/Dingchao/Courses/R/RShinyDash/Example App/Parsing_Playtxt.R')
library(qdapRegex)
# Read the whole data set line by line into variable data
rawdata <- readLines("play.txt")
# Remove all the blank rows in the raw data
rawdata <- rawdata[sapply(rawdata, nchar) > 0]
# A list contain the transformed data as the output
data <- list()
# An array holding the week days
days <- c("Mon","Tue","Wed","Thu","Fri","Sat","Sun")
for(i in 1 : length(rawdata)) {
# Replace
line <- strsplit(rawdata[i],split="^\\s+")
# If there is a blank space in the starting trailing space, then it is a row of title
if (line[[1]][1] == "") {
line <- line[[1]][2] # Get the substance of the header
line <- rm_white(line) # Remove all extra white space but only leave one space between word in the line
header_components <- strsplit(line," ")[[1]] # Convert the string of header to a vector holding individual components
header <- tapply(header_components,seq(1:length(header_components)),paste) # Create an array to hold individual components of header
}
else{
line <- line[[1]][1] # Get the substance of the parts
line <- rm_white(line) # Remove all extra white space but only leave one space between word in the line
parts_components <- strsplit(line," ")[[1]] # Convert the string of parts to a vector holding individual components
parts <- tapply(parts_components,seq(1:length(parts_components)),paste)
# Watch out for the memory difference between parts and parts_components
# If the lengths of parts equal to the length of components, then it is part of the table
if (parts[1] %in% days) {
# Combine the 1st, 2nd, 3rd components to form one string for Date
parts[1] <- paste(parts[1],parts[2], parts[3], sep = " ")
# Remove the 2nd, 3rd components which are already merged into the 1st component Date
parts <- parts[-c(2,3)]
# Create a data frame to hold each test record title and values
df <- data.frame()
# Add the values into the created data frame
df <- rbind(df, parts)
# Add header to the data frame
names(df) <- header
# Insert the data frame into the data array
data[[i]] <- df
}
## If not, add it as a comment
else {
df <- cbind(df, Comment = line)
# Insert the data frame into the data array
data[[i]] <- df
}
}
}
i
line <- strsplit(rawdata[i],split="^\\s+")
line[[1]][1] == ""
line
rawdata <- readLines("play.txt")
rawdata
getwd()
readLines("play.txt")
source('~/Dingchao/Courses/R/RShinyDash/Example App/Parsing_Playtxt.R')
write.csv(data, file = "newfile", row.names = TRUE, sep = ',', col.names = TRUE)
write.csv(data, file = "newfile", sep = ',', col.names = TRUE)
write.csv(data, file = "newfile")
write.table(data,file = "newfile")
require(reshape2)
data$id <- rownames(data)
melt(data)
data
write.table(data[[273]],file = "newfile")
write.table(data[[273]],file = "newfile.csv")
write.csv(data[[273]],file = "newfile.csv")
data[[272]]
data[[271]]
write.csv(data[[271]],file = "newfile.csv")
write.table(data[[273]],file = "newfile.csv",append = True)
write.table(data[[273]],file = "newfile.csv",append = a)
write.table(data[[273]],file = "newfile.csv",append = "a")
write.table(data[[273]],file = "newfile.csv",append = "w")
write.table(data[[273]],file = "newfile.csv",append = TRUE)
write.table(data[[273]],file = "newfile.csv",append = TRUE,row.names = TRUE, col.names = TRUE)
write.csv(data[[273]],file = "newfile.csv",append = TRUE,row.names = TRUE, col.names = TRUE)
write.csv(data[[273]],file = "newfile.csv",append = TRUE)
write.csv(data[[273]],file = "newfile.csv")
write.csv(data[[273]],file = "newfile.csv",append = T)
write.csv(data[[273]],file = "newfile.csv",append = TRUE,row.names = TRUE, col.names = TRUE)
write.table(data[[273]],file = "newfile.csv",append = TRUE,row.names = TRUE, col.names = TRUE)
write.table(data[[273]],file = "newfile.csv",append = T,row.names = TRUE, col.names = TRUE)
write.table(data[[273]],file = "newfile.csv",append = TRUE,row.names = TRUE, col.names = TRUE)
write.table(data[[273]],file = "newfile.csv",append = TRUE,row.names = TRUE, col.names = TRUE)
write.csv(data[[273]],file = "newfile.csv",append = TRUE,row.names = TRUE, col.names = TRUE)
write.table(data[[273]],file = "newfile.csv",append = TRUE,row.names = TRUE, col.names = TRUE)
write.table(data[[273]],file = "newfile.csv",append = TRUE,row.names = TRUE, col.names = TRUE,sep = " ")
write.table(data[[273]],file = "newfile.csv",append = TRUE,row.names = TRUE, col.names = TRUE,sep = "")
write.table(data[[273]],file = "newfile.csv",append = TRUE,row.names = TRUE, col.names = TRUE,sep = "\n")
write.table(data[[273]],file = "newfile.csv",append = TRUE,row.names = TRUE, col.names = TRUE,sep = """")
write.table(data[[273]],file = "newfile.csv",append = TRUE,row.names = TRUE, col.names = TRUE,sep = "''")
write.table(data[[273]],file = "newfile.csv",append = TRUE,row.names = TRUE, col.names = TRUE,sep = "\t")
write.table(data[[273]],file = "newfile.csv",append = TRUE,row.names = TRUE, col.names = TRUE,sep = "\t",quote = F)
write.table(data[[273]],file = "newfile.csv",append = TRUE,row.names = TRUE, col.names = TRUE,sep = "\t",quote = F,eol = "\r")
write.table(data[[273]],file = "newfile.csv",append = TRUE,row.names = TRUE, col.names = TRUE,sep = "\t",quote = F,eol = "\r\n")
write.table(data[[273]],file = "newfile.csv",append = TRUE,row.names = TRUE, col.names = TRUE,sep = ",",quote = F,eol = "\r\n")
write.table(data[[273]],file = "newfile.csv",append = TRUE,row.names = TRUE, col.names = TRUE,sep = ",",quote = F)
write.table(data[[273]],file = "newfile.csv",append = TRUE,sep = ",",quote = F)
data[[273]]
data[[271]]
data[[271]][1]
gsub(','," ",data[[271]][1])
x <- gsub(','," ",data[[271]][1])
x
x <- gsub(","," ",data[[271]][1])
x
x <- gsub("15"," ",data[[271]][1])
x
x <- gsub("15"," ",as.character(data[[271]][1]))
x
line
x <- gsub("15"," ",as.character(line)
x <- gsub(","," ",line
x <- gsub(","," ",line)
x
x <- gsub("'","",line)
x
source('~/Dingchao/Courses/R/RShinyDash/Example App/Parsing_Playtxt.R')
line
data[[273]]
i
line <- strsplit(rawdata[i],split="^\\s+")
line <- line[[1]][1] # Get the substance of the parts
line <- rm_white(line) # Remove all extra white space but only leave one space between word in the line
line
line <- gsub(","," ",line)
line
line <- gsub("'","",line)
parts_components <- strsplit(line," ")[[1]] # Convert the string of parts to a vector holding individual components
parts <- tapply(parts_components,seq(1:length(parts_components)),paste)
parts[1]
parts[1] <- paste(parts[1],parts[2], parts[3], sep = " ")
parts[1]
parts[4]
source('~/Dingchao/Courses/R/RShinyDash/Example App/Parsing_Playtxt.R')
data[[273]]
write.table(data[[273]],file = "newfile.csv",append = TRUE,sep = ",",quote = F)
write.table(data[[273]][1],file = "newfile.csv",append = TRUE,sep = ",",quote = F)
data[[273]]
data[[273]]$1
write.table(data[[273]][1],file = "newfile.csv",append = TRUE,sep = ",",quote = F,row.name = F)
write.table(data[[273]],file = "newfile.csv",append = TRUE,sep = ",",quote = F,row.name = F)
for (i in 1: length(data)) {
write.table(data[[i]],file = "newfile.csv",append = TRUE,sep = ",",quote = F,row.name = F)
}
data <- data[sapply(data, nchar) > 0]
data[[272]]
data[[272]] == NULL
data[[272]] != NULL
logical(0)
is.null(data[[272]])
!is.null(data[[272]])
for (i in 1: length(data)) {
if (!is.null(data[[272]]) ) {
write.table(data[[i]],file = "newfile.csv",append = TRUE,sep = ",",quote = F,row.name = F)
}
}
for (i in 1: length(data)) {
if (!is.null(data[[i]]) ) {
write.table(data[[i]],file = "newfile.csv",append = TRUE,sep = ",",quote = F,row.name = F)
}
}
for (i in 1: length(data)) {
if (!is.null(data[[i]]) ) {
write.table(data[[i]],file = "exportfile.csv",append = TRUE,sep = ",",quote = F,row.name = F)
}
}
getwd()
setwd("~/Dingchao/Courses/R/RShinyDash/Dashboard")
getwd()
setwd("~/Dingchao/Courses/R/onLineForm")
load("~/Dingchao/Courses/R/onLineForm/.RData")
source('~/Dingchao/Courses/R/onLineForm/test.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/onLineForm/test.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/onLineForm/test.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/onLineForm/test.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/onLineForm/test.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/onLineForm/test.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/onLineForm/test.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/onLineForm/test.R')
source('~/Dingchao/Courses/R/onLineForm/test.R')
source('~/Dingchao/Courses/R/onLineForm/test.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/onLineForm/test.R')
source('~/Dingchao/Courses/R/onLineForm/test.R')
shinyApp(ui = ui, server = server)
install.packages("DT")
source('~/Dingchao/Courses/R/onLineForm/test.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/onLineForm/test.R')
shinyApp(ui = ui, server = server)
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/onLineForm/test.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/onLineForm/test.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/onLineForm/test.R')
shinyApp(ui = ui, server = server)
source('~/Dingchao/Courses/R/onLineForm/test.R')
shinyApp(ui = ui, server = server)
